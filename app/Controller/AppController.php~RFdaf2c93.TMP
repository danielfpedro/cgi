<?php

/**
 * Application level Controller
 *
 * This file is application-wide controller file. You can put all
 * application-wide controller-related methods here.
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       app.Controller
 * @since         CakePHP(tm) v 0.2.9
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */

App::uses('Controller', 'Controller');
/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @package		app.Controller
 * @link		http://book.cakephp.org/2.0/en/controllers.html#the-app-controller
 */
class AppController extends Controller {

	// public $components = array(
	// 	'Session',
	// 	'Auth'=> array(
	// 		'userModel'=> 'Usuario',
	// 		'loginRedirect'=> array(
	// 			'controller'=> 'indicacoes'),
	// 		'logoutRedirect'=> array(
	// 			'controller'=> 'usuarios', 'action'=> 'login'),
	// 		'loginAction'=> array(
	// 			'controller'=> 'usuarios',
	// 			'action'=> 'login'),
	// 		'authenticate'=> array(
	// 			'Form'=> array(
	// 				'userModel'=> 'Usuario',
	// 				'fields'=> array(
	// 					'username'=> 'email',
	// 					'password'=> 'senha')
	// 				)
	// 			)
	// 		)
	// 	);

	// Informações do Auth gambi
	public $Auth = false;
	public $Auth_ususario_id = null;
	public $Auth_nome = null;
	public $Auth_email = null;
	public $Auth_cargo = null;

	public function beforeFilter() {

		$site_name = 'SGI';

		$this->loadModel('MainMenu');
		$items_menu = $this->MainMenu->getPrincipal();
		$items_menu_relatorios = $this->MainMenu->getRelatorios();
		$items_menu_dados_extras = $this->MainMenu->getDadosExtras();
		$this->set(compact('items_menu', 'items_menu_relatorios', 'site_name', 'items_menu_dados_extras'));

		$this->loadModel('Notificacao');
		$notificacoes = $this->Notificacao->find('all', array('limit'=> 8));
		$this->set(compact('notificacoes'));

		//Auth gambi
		$this->customAuth();

	}

	public function customAuth() {
		if ($this->Session->read('Auth.flag')) {

			$this->Auth = true;
			$this->Auth_usuario_id = $this->Session->read('Auth.usuario_id');
			$this->Auth_nome = $this->Session->read('Auth.nome');
			$this->Auth_email = $this->Session->read('Auth.email');
			$this->Auth_cargo = $this->Session->read('Auth.cargo');

			$this->set('usuario_id', $Auth->usuario_id);
			$this->set('usuario_id', $Auth->nome);
			$this->set('email', $Auth->email);
			$this->set('cargo', $Auth->cargo);
			$this->set('usuario_id', $Auth->usuario_id);

			if ($this->params['controller'] == 'usuarios' AND $this->params['action'] == 'login') {
				return $this->redirect(array('controller'=> 'indicacoes', 'action'=> 'index'));
			}
		} else {
			if ($this->params['controller'] == 'usuarios' AND $this->params['action'] == 'login') {

			} else {
				return $this->redirect(array('controller'=> 'usuarios', 'action'=> 'login'));
			}
		}
	}

	public function validationErrorsToList($array) {
		$errors = '';
		foreach ($array as $key => $item) {
			$errors .= '<strong>' . $key . '</strong>:<br>';
			foreach ($item as $i) {
				$errors .= $i . '<br>';
			}
		}
		return $errors;
	}

}
